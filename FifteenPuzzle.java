// FifteenPuzzle.java

/****
* This program implements a sliding puzzle that consists of a frame of 
* numbered square tiles in random order with one tile missing.
* The objective of the player is to move the tiles until the numbers
* are sorted top-down, left-right.
*
* A shuffle button shuffles the tiles. 
* When the player has put all tiles in numeric order, a win-message
* is displayed.
*
* @author	Anna Ntenta
* @version	1.0 Last Modified 4/8/2014
*/

import javax.swing.*;                // Swing components
import java.awt.*;                   // Colors, Fonts, etc.
import java.awt.event.*;             // ActionListener, etc.
import java.util.*;                  
import javax.swing.border.*;

public class FifteenPuzzle extends JFrame implements ActionListener
{
	// sets the difficulty of the game by determining the amount of shuffle
	// normal = 75
	public static final int DIFFICULTY = 75;

	// private variables
	private JFrame frame;
	private JButton shuffle, exit;

	// array of tiles for the game
	private JButton [] jb = new JButton[16];

	// this variable is set to "1" when we do not want to display
	// a "You win"- message when a button is clicked
	private int winMessage;
	
	/****
     *  Constructor. Sets up user interface for the game
     *  and shuffles the board on launch.
     */
	public FifteenPuzzle()
	{
		frame = new JFrame ("Fifteen Puzzle");
		frame.setLayout( new BorderLayout( 10, 10 ));

		// create the tiles for the game
		for (int i = 0; i < 15; i++ )
		{	
		 	jb[i] = new JButton ("" + (i + 1));
		 	jb[i].addActionListener(this);
		 	jb[i].setFont (new Font ("Times", Font.BOLD, 24));
		}
		// create the blank tile
		jb[15] = new JButton("");
		jb[15].addActionListener(this);
		jb[15].setFont (new Font ("Times", Font.BOLD, 24));

		shuffle = new JButton("Shuffle");
		shuffle.addActionListener(this);

		exit = new JButton("Exit");
		exit.addActionListener(this);

		
		// tile grid
		JPanel tiles = new JPanel(new GridLayout(4, 4, 4, 4));
		// add buttons (tiles) to grid
		for (int i = 0; i < 16; i++) 
			tiles.add ( jb[i] );

		// bottom section for "shuffle" and "exit" buttons
		JPanel bottom = new JPanel(new FlowLayout());
		// add buttons to bottom
		bottom.add(shuffle);
		bottom.add(exit);

		frame.add (tiles, BorderLayout.CENTER);
		frame.add (bottom, BorderLayout.SOUTH);

		frame.setSize (600, 600);
        frame.setVisible (true);
        frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);  

        // shuffle the board
        shuffle(); 
	}

 	
	/**
     *  Shuffles the board by clicking random
     *  tiles a defined (DIFFICULTY) amount of times
     * 
     */
 	public void shuffle() 
 	{
 		// do not display "You Win" message when clicking tiles
 		winMessage = 1;
 		// click tiles
	 	for (int i = 0; i < DIFFICULTY; i++) {
	 		int random = (int)(Math.random() * 16);
	 		jb[random].doClick();
	 	}
	 	// OK to display Win-message again
	 	winMessage = 0;
 	}

 	
 	/**
     *  Checks the source of the event and either shuffles board,
     *  exits game or moves a tile.
     *
     *  @param  ae   The event generated by click of button
     */
	public void actionPerformed( ActionEvent ae )
    {
    	// if exit button is clicked, stop program
        if( ae.getSource() == exit ) {
        	winMessage = 1;
        	frame.dispose();
        }
        if( ae.getSource() == shuffle ) {
        	shuffle();
        }
        // if any other button is clicked, move tile
        else {     
	        // check the source of the event
	        // case 1: upper left corner
	        if(ae.getSource() == jb[0]) { 
	        	if(jb[1].getText() == "") {
		        	String temp = jb[0].getText();
		        	jb[0].setText("");
		        	jb[1].setText(temp);
	        	}
	        	if(jb[4].getText() == "") {
		        	String temp = jb[0].getText();
		        	jb[0].setText("");
		        	jb[4].setText(temp);
	        	}
	        	
	        }
	        // case 2: first row middle tiles
	        for (int i= 1; i < 3; i++) {
	        	if(ae.getSource() == jb[i]) { 
		        	if(jb[i + 1].getText() == "") {
			        	String temp = jb[i].getText();
			        	jb[i].setText("");
			        	jb[i + 1].setText(temp);
		        	}
		        	if(jb[i - 1].getText() == "") {
			        	String temp = jb[i].getText();
			        	jb[i].setText("");
			        	jb[i - 1].setText(temp);
		        	}
		        	if(jb[i + 4].getText() == "") {
			        	String temp = jb[i].getText();
			        	jb[i].setText("");
			        	jb[i + 4].setText(temp);
		        	}
	        	}
	    	}
	    	// case 3: upper right corner
	        if(ae.getSource() == jb[3]) { 
	        	if(jb[2].getText() == "") {
		        	String temp = jb[3].getText();
		        	jb[3].setText("");
		        	jb[2].setText(temp);
	        	}
	        	if(jb[7].getText() == "") {
		        	String temp = jb[3].getText();
		        	jb[3].setText("");
		        	jb[7].setText(temp);
	        	}
	        }
	        // case 4: left column middle tiles
	        for (int i = 4; i < 9; i += 4) {
	        	if(ae.getSource() == jb[i]) { 
		        	if(jb[i + 1].getText() == "") {
			        	String temp = jb[i].getText();
			        	jb[i].setText("");
			        	jb[i + 1].setText(temp);
		        	}
		        	if(jb[i - 4].getText() == "") {
			        	String temp = jb[i].getText();
			        	jb[i].setText("");
			        	jb[i - 4].setText(temp);
		        	}
		        	if(jb[i + 4].getText() == "") {
			        	String temp = jb[i].getText();
			        	jb[i].setText("");
			        	jb[i + 4].setText(temp);
		        	}
	        	}
	    	}
	    	// case 5a: middle tiles
	        for(int i = 5; i < 7; i++) {
	        	if (ae.getSource() == jb[i]) { 
		        	// check if the tile right above is empty
		        	if(jb[i - 4].getText() == "") {
			        	String temp = jb[i].getText();
			        	jb[i].setText("");
			        	jb[i - 4].setText(temp);
		        	}
		        	// check if tile behind is empty
		        	if(jb[i - 1].getText() == "") {
			        	String temp = jb[i].getText();
			        	jb[i].setText("");
			        	jb[i - 1].setText(temp);
		        	}
		        	// check if tile in front is empty
		        	if(jb[i + 1].getText() == "") {
			        	String temp = jb[i].getText();
			        	jb[i].setText("");
			        	jb[i + 1].setText(temp);
		        	}
		        	// check if tile below is empty
		        	if(jb[i + 4].getText() == "") {
			        	String temp = jb[i].getText();
			        	jb[i].setText("");
			        	jb[i + 4].setText(temp);
		        	}
	        	}
	        }
	        // case 5b: middle tiles
	        for(int i = 9; i < 11; i++) {
	        	if (ae.getSource() == jb[i]) { 
		        	// check if the tile right above is empty
		        	if(jb[i - 4].getText() == "") {
			        	String temp = jb[i].getText();
			        	jb[i].setText("");
			        	jb[i - 4].setText(temp);
		        	}
		        	// check if tile behind is empty
		        	if(jb[i - 1].getText() == "") {
			        	String temp = jb[i].getText();
			        	jb[i].setText("");
			        	jb[i - 1].setText(temp);
		        	}
		        	// check if tile in front is empty
		        	if(jb[i + 1].getText() == "") {
			        	String temp = jb[i].getText();
			        	jb[i].setText("");
			        	jb[i + 1].setText(temp);
		        	}
		        	// check if tile below is empty
		        	if(jb[i + 4].getText() == "") {
			        	String temp = jb[i].getText();
			        	jb[i].setText("");
			        	jb[i + 4].setText(temp);
		        	}
	        	}
	        }
	        // case 6: right column middle tiles
	        for (int i = 7; i < 12; i += 4) {
	        	if(ae.getSource() == jb[i]) { 
		        	if(jb[i - 1].getText() == "") {
			        	String temp = jb[i].getText();
			        	jb[i].setText("");
			        	jb[i - 1].setText(temp);
		        	}
		        	if(jb[i - 4].getText() == "") {
			        	String temp = jb[i].getText();
			        	jb[i].setText("");
			        	jb[i - 4].setText(temp);
		        	}
		        	if(jb[i + 4].getText() == "") {
			        	String temp = jb[i].getText();
			        	jb[i].setText("");
			        	jb[i + 4].setText(temp);
		        	}
	        	}
	    	}
	    	// case 7: lower left corner
	    	if(ae.getSource() == jb[12]) { 
	        	if(jb[13].getText() == "") {
		        	String temp = jb[12].getText();
		        	jb[12].setText("");
		        	jb[13].setText(temp);
	        	}
	        	if(jb[8].getText() == "") {
		        	String temp = jb[12].getText();
		        	jb[12].setText("");
		        	jb[8].setText(temp);
	        	}
	        }
	        // case 8: bottom row middle tiles
	        for (int i = 13; i < 15; i++) {
	        	if(ae.getSource() == jb[i]) { 
		        	if(jb[i + 1].getText() == "") {
			        	String temp = jb[i].getText();
			        	jb[i].setText("");
			        	jb[i + 1].setText(temp);
		        	}
		        	if(jb[i - 1].getText() == "") {
			        	String temp = jb[i].getText();
			        	jb[i].setText("");
			        	jb[i - 1].setText(temp);
		        	}
		        	if(jb[i - 4].getText() == "") {
			        	String temp = jb[i].getText();
			        	jb[i].setText("");
			        	jb[i - 4].setText(temp);
		        	}
	        	}
	    	}
	    	// bottom right corner
	    	if(ae.getSource() == jb[15]) { 
	        	if(jb[14].getText() == "") {
		        	String temp = jb[15].getText();
		        	jb[15].setText("");
		        	jb[14].setText(temp);
	        	}
	        	if(jb[11].getText() == "") {
		        	String temp = jb[15].getText();
		        	jb[15].setText("");
		        	jb[11].setText(temp);
	        	}
	        }
	        // check if puzzle is solved
	        if(winMessage != 1) {
		        int checkNum = 0;
		        for(int i = 0; i < 15; i++) {
		        	if(jb[i].getText().equals(Integer.toString(i + 1))) {
		        		checkNum+=1; }		
		        }
		        
		        if(checkNum == 15)
		        	JOptionPane.showMessageDialog (null, "You Win!");
		    }
    	}
	}

 	public static void main(String args[]) 
    {
        FifteenPuzzle puzzle = new FifteenPuzzle ();
    }     
}
